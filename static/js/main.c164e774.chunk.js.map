{"version":3,"sources":["store/todos.ts","store/loading.ts","store/sort.ts","store/index.ts","api/api.tsx","api/helpers.ts","Buttons.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["sortTodos","todosList","type","reducer","action","initialState","isLoading","isVisible","state","field","order","loading","sort","rootReducer","combineReducers","todosReducer","loadingReducer","sortReducer","store","createStore","composeWithDevTools","URL","getTodos","a","fetch","then","response","json","todosData","usersData","map","todo","userInfo","find","user","userId","id","name","BUTTONS","text","Buttons","dispatch","useDispatch","sortTitle","useSelector","selectors","className","button","key","onClick","sortField","TodoList","todos","b","localeCompare","completed","title","deleteTodo","filter","App","data","loadingTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c164e774.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n\nconst HANDLE_SUCCES = 'HANDLE_SUCCES';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SORT_TODOS = 'SORT_TODOS';\n\nexport const loadingTodos = (todosList: Todo[]) => ({ type: HANDLE_SUCCES, todosList });\nexport const deleteTodo = (todosList: Todo[]) => ({ type: DELETE_TODO, todosList });\nexport const sortTodos = (todosList: Todo[]) => ({ type: SORT_TODOS, todosList });\n\n\nconst reducer = (todosList: Todo[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case HANDLE_SUCCES:\n      return action.todosList;\n    case DELETE_TODO:\n    case SORT_TODOS:\n      return action.todosList;\n    default:\n      return todosList;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\n// type State = {\n//   isLoading: boolean;\n//   isVisible: boolean;\n// };\n\nconst initialState = {\n  isLoading: false,\n  isVisible: false,\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        isLoading: true,\n        isVisible: false,\n      };\n\n    case FINISH_LOADING:\n      return {\n        isVisible: true,\n        isLoading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SORT_BY = 'SORT_BY';\nconst REVERSE = 'REVERSE';\nconst SORT_ASK = 'SORT_ASK';\n\ntype SortState = {\n  field: string;\n  order: 'ASK' | 'DESK' ;\n};\n\nconst initialState: SortState = {\n  field: '',\n  order: 'ASK',\n};\n\nexport const setSortField = (value: string) => ({ type: SORT_BY, field: value });\nexport const setSortOrder = () => ({ type: REVERSE });\nexport const setSortAsk = () => ({ type: SORT_ASK });\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SORT_BY:\n      return {\n        ...state,\n        field: action.field,\n      };\n    case REVERSE:\n      return {\n        ...state,\n        order: state.order === 'ASK' ? 'DESK' : 'ASK',\n      };\n    case SORT_ASK:\n      return {\n        ...state,\n        order: 'ASK',\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport todosReducer from './todos';\nimport loadingReducer from './loading';\nimport sortReducer from './sort';\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const todosList = (state: RootState) => state.todosList;\nexport const isLoading = (state: RootState) => state.loading.isLoading;\nexport const isVisible = (state: RootState) => state.loading.isVisible;\n\nexport const field = (state: RootState) => state.sort.field;\nexport const order = (state: RootState) => state.sort.order;\n\ntype RootState = {\n  todosList: Todo[];\n  loading: {\n    isLoading: boolean;\n    isVisible: boolean;\n  };\n  sort: {\n    field: string;\n    order: 'ASK' | 'DESK' ;\n  };\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = combineReducers(\n  {\n    todosList: todosReducer,\n    loading: loadingReducer,\n    sort: sortReducer,\n  },\n);\n\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\n\nconst responseTodos = () => {\n  return fetch(`${URL}todos.json`)\n    .then(response => response.json());\n};\n\nconst responseUsers = () => {\n  return fetch(`${URL}users.json`)\n    .then(response => response.json());\n};\n\nexport const getTodos = async () => {\n  const todosData = await responseTodos();\n  const usersData = await responseUsers();\n\n\n  return todosData.map((todo: Todo) => {\n    const userInfo = usersData.find((user: User) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      user: userInfo.name,\n    };\n  });\n};\n","export const BUTTONS = [\n  {\n    name: 'title',\n    text: ' Sort by Title',\n  },\n  {\n    name: 'user',\n    text: ' Sort by Name',\n  },\n  {\n    name: 'completed',\n    text: ' Sort by Completed',\n  },\n];\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BUTTONS } from './api/helpers';\nimport { setSortField, setSortOrder, setSortAsk } from './store/sort';\nimport * as selectors from './store/index';\n\n\nconst Buttons = () => {\n  const dispatch = useDispatch();\n  const sortTitle = useSelector(selectors.field);\n\n  const handleSort = (sortField: string) => {\n    dispatch(setSortField(sortField));\n    if (sortTitle === sortField) {\n      dispatch(setSortOrder());\n    } else {\n      dispatch(setSortAsk());\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      {BUTTONS.map(button => (\n        <button\n          key={button.name}\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleSort(button.name)}\n        >\n          {button.text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTodo, sortTodos } from './store/todos';\nimport Buttons from './Buttons';\nimport * as selectors from './store/index';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(selectors.todosList);\n  const sortTitle = useSelector(selectors.field);\n  const sortOrder = useSelector(selectors.order);\n\n\n  switch (sortOrder) {\n    case 'DESK':\n      switch (sortTitle) {\n        case 'user':\n        case 'title':\n          dispatch(sortTodos(todos\n            .sort((a, b) => b[sortTitle].localeCompare(a[sortTitle]))));\n          break;\n        case 'completed':\n          dispatch(sortTodos(todos\n            .sort((a, b) => (+a.completed - +b.completed))));\n          break;\n        default:\n      }\n\n      break;\n    case 'ASK':\n      switch (sortTitle) {\n        case 'user':\n        case 'title':\n          dispatch(sortTodos(todos\n            .sort((a, b) => a[sortTitle].localeCompare(b[sortTitle]))));\n          break;\n        case 'completed':\n          dispatch(sortTodos(todos\n            .sort((a, b) => (+b.completed - +a.completed))));\n          break;\n        default:\n      }\n\n      break;\n    default:\n  }\n\n\n  const deleleTodo = (id: number) => {\n    dispatch(deleteTodo(todos.filter(todo => todo.id !== id)));\n  };\n\n\n  return (\n    <>\n      <Buttons />\n      <div className=\"todos_container\">\n        {todos.map(todo => (\n          <div\n            key={todo.id}\n            className=\"todo\"\n          >\n            <p className=\"todo_title\">\n              {todo.title}\n            </p>\n            <p className=\"todo_user\">{todo.user}</p>\n            {todo.completed\n              ? <p className=\"todo_completed\">completed</p>\n              : <p className=\"todo_inprocess\">in process</p>}\n            <button\n              type=\"button\"\n              className=\"todo__button todo__button--delete\"\n              onClick={() => deleleTodo(todo.id)}\n            >\n              Delete todo\n            </button>\n          </div>\n\n        ))}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api/api';\nimport './App.scss';\nimport { startLoading, finishLoading } from './store/loading';\nimport { loadingTodos } from './store/todos';\nimport { TodoList } from './TodoList';\nimport * as selectors from './store/index';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectors.isLoading);\n  const isVisible = useSelector(selectors.isVisible);\n\n  const loadTodos = () => {\n    dispatch(startLoading());\n    getTodos()\n      .then(data => dispatch(loadingTodos(data)))\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <div className=\"container\">\n        {!isVisible\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={loadTodos}\n            >\n              Load Todos\n            </button>\n          )}\n        {isLoading\n          ? <div className=\"loader\" />\n          : (isVisible\n          && (\n            <>\n              <TodoList />\n            </>\n          )\n          )}\n\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}