{"version":3,"sources":["store/index.ts","api/api.tsx","TodoList.tsx","api/helpers.ts","Buttons.tsx","App.tsx","index.tsx"],"names":["sortTodos","todosList","type","state","initialState","isLoading","isVisible","store","createStore","action","composeWithDevTools","URL","getTodos","a","fetch","then","response","json","todosData","usersData","map","todo","userInfo","find","user","userId","id","name","TodoList","todos","dispatch","useDispatch","className","key","title","completed","onClick","filter","BUTTONS","text","Buttons","useSelector","button","sortField","sort","b","localeCompare","handleSort","connect","props","data","loadingTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de33daf0.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst HANDLE_SUCCES = 'HANDLE_SUCCES';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SORT_TODOS = 'SORT_TODOS';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const loadingTodos = (todosList: Todo[]) => ({ type: HANDLE_SUCCES, todosList });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const deleteTodo = (todosList: Todo[]) => ({ type: DELETE_TODO, todosList });\nexport const sortTodos = (todosList: Todo[]) => ({ type: SORT_TODOS, todosList });\n// Selectors - a function receiving Redux state and returning some data from it\nexport const todosList = (state: RootState) => state.todosList;\nexport const isLoading = (state: RootState) => state.isLoading;\nexport const isVisible = (state: RootState) => state.isVisible;\n\n// Initial state\nexport type RootState = {\n  todosList: Todo[];\n  isLoading: boolean;\n  isVisible: boolean;\n};\n\nconst initialState: RootState = {\n  todosList: [],\n  isLoading: false,\n  isVisible: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true, isVisible: false };\n\n    case HANDLE_SUCCES:\n      return {\n        ...state,\n        todosList: action.todosList,\n      };\n    case FINISH_LOADING:\n      return { ...state, isVisible: true, isLoading: false };\n\n    case DELETE_TODO:\n      return { ...state, todosList: action.todosList };\n\n    default:\n      return state;\n\n    case SORT_TODOS:\n      return {\n        ...state,\n        todosList: [...action.todosList],\n      };\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\n\nconst responseTodos = () => {\n  return fetch(`${URL}todos.json`)\n    .then(response => response.json());\n};\n\nconst responseUsers = () => {\n  return fetch(`${URL}users.json`)\n    .then(response => response.json());\n};\n\nexport const getTodos = async () => {\n  const todosData = await responseTodos();\n  const usersData = await responseUsers();\n\n\n  return todosData.map((todo: Todo) => {\n    const userInfo = usersData.find((user: User) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      user: userInfo.name,\n    };\n  });\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo } from './store/index';\n\ntype Props = {\n  todos: Todo[];\n};\n\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  const deleleTodo = (id: number) => {\n    dispatch(deleteTodo(todos.filter(todo => todo.id !== id)));\n  };\n\n  return (\n    <div className=\"todos_container\">\n      {todos.map(todo => (\n        <div\n          key={todo.id}\n          className=\"todo\"\n        >\n          <p className=\"todo_title\">\n            {todo.title}\n          </p>\n          <p className=\"todo_user\">{todo.user}</p>\n          {todo.completed\n            ? <p className=\"todo_completed\">completed</p>\n            : <p className=\"todo_inprocess\">in process</p>}\n          <button\n            type=\"button\"\n            className=\"todo__button todo__button--delete\"\n            onClick={() => deleleTodo(todo.id)}\n          >\n            Delete todo\n          </button>\n        </div>\n\n      ))}\n    </div>\n  );\n};\n","export const BUTTONS = [\n  {\n    name: 'title',\n    text: ' Sort by Title',\n  },\n  {\n    name: 'user',\n    text: ' Sort by Name',\n  },\n  {\n    name: 'completed',\n    text: ' Sort by Completed',\n  },\n];\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { sortTodos, todosList } from './store/index';\nimport { BUTTONS } from './api/helpers';\n\nconst Buttons = () => {\n  const todos = useSelector(todosList);\n  const dispatch = useDispatch();\n\n  const handleSort = (sortField: string) => {\n    switch (sortField) {\n      case 'title':\n      case 'user':\n        dispatch(sortTodos(todos.sort((a, b) => (\n          a[sortField].localeCompare(b[sortField])\n        ))));\n        break;\n      case 'completed':\n        dispatch(sortTodos(todos.sort((a, b) => (\n          +a.completed - +b.completed\n        ))));\n        break;\n      default: dispatch(sortTodos(todos));\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      {BUTTONS.map(button => (\n        <button\n          key={button.name}\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleSort(button.name)}\n        >\n          {button.text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { getTodos } from './api/api';\nimport './App.scss';\nimport {\n  startLoading, loadingTodos, finishLoading, RootState,\n} from './store/index';\nimport { TodoList } from './TodoList';\nimport Buttons from './Buttons';\n\n\nconst App = (props: RootState) => {\n  const {\n    todosList,\n    isLoading,\n    isVisible,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const loadTodos = () => {\n    dispatch(startLoading());\n    getTodos()\n      .then(data => dispatch(loadingTodos(data)))\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <div className=\"container\">\n        {!isVisible\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={loadTodos}\n            >\n              Load Todos\n            </button>\n          )}\n        {isLoading\n          ? <div className=\"loader\" />\n          : (isVisible\n          && (\n            <>\n              <Buttons />\n              <TodoList todos={todosList} />\n            </>\n          )\n          )}\n\n      </div>\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: RootState) => ({\n  todosList: state.todosList,\n  isLoading: state.isLoading,\n  isVisible: state.isVisible,\n});\n\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}